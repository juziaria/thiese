package com.gdy.thieseback.service.Impl;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.gdy.thieseback.mapper.EmployMeetingMapper;import com.gdy.thieseback.entity.EmployMeeting;import com.gdy.thieseback.req.EmployMeetingReq;import com.gdy.thieseback.resp.PageResp;import com.gdy.thieseback.service.EmployMeetingService;import org.apache.commons.lang3.ObjectUtils;import org.springframework.stereotype.Service;import javax.annotation.Resource;@Service public  class EmployMeetingServiceImpl extends ServiceImpl<EmployMeetingMapper, EmployMeeting> implements EmployMeetingService {//    @Autowired//    @Lazy//    private EmployMeetingService employMeetingService;    @Resource    private EmployMeetingMapper employMeetingMapper;//    public List<EmployMeeting> getEmployMeeting(EmployMeetingDto employMeetingDto){//        List<EmployMeetingDto> employMeetingDto = ;//        if(employMeetingMapper.selectById()== null){//            return employMeetingMapper.findEmployMeeting();//        }//    }////    @Override//    public List<EmployMeeting> findEmployMeeting(Date time,String name,String master,String place,String major){////        return EmployMeetingMapper.findEmployMeeting(time,name,master,place,major);//////        List<Student> studentList = EmployMeetingMapper.findEmployMeeting();//    }     @Override      public PageResp<EmployMeeting> getList(EmployMeetingReq employMeetingReq){         QueryWrapper<EmployMeeting> queryWrapper = new QueryWrapper<>();         if(!ObjectUtils.isEmpty(employMeetingReq.getMeetingtime())){             queryWrapper.lambda().eq(EmployMeeting::getMeetingtime,employMeetingReq.getMeetingtime());         }         if(!ObjectUtils.isEmpty(employMeetingReq.getInterviewtime())){             queryWrapper.lambda().eq(EmployMeeting::getInterviewtime,employMeetingReq.getInterviewtime());         }         if(!ObjectUtils.isEmpty(employMeetingReq.getName())){             queryWrapper.lambda().eq(EmployMeeting::getName,employMeetingReq.getName());         }         if(!ObjectUtils.isEmpty(employMeetingReq.getMaster())){             queryWrapper.lambda().eq(EmployMeeting::getMaster,employMeetingReq.getMaster());         }         if(!ObjectUtils.isEmpty(employMeetingReq.getPlace())){             queryWrapper.lambda().eq(EmployMeeting::getPlace,employMeetingReq.getPlace());         }         if(!ObjectUtils.isEmpty(employMeetingReq.getMajor())){             queryWrapper.lambda().eq(EmployMeeting::getMajor,employMeetingReq.getMajor());         }         if(!ObjectUtils.isEmpty(employMeetingReq.getFlag())){             queryWrapper.lambda().eq(EmployMeeting::getFlag,employMeetingReq.getFlag());         }         Page<EmployMeeting> page = new Page<>(employMeetingReq.getPage(),employMeetingReq.getSize());         IPage<EmployMeeting> employMeetingIPage = employMeetingMapper.selectPage(page,queryWrapper);         PageResp<EmployMeeting> pageResp = new PageResp<>();         pageResp.setTotal(employMeetingIPage.getTotal());         pageResp.setList(employMeetingIPage.getRecords());         return  pageResp;      }}